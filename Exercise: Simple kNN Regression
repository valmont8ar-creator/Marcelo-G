# Import required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
%matplotlib inline




import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Define la ruta al archivo CSV
file_path = os.path.join(os.path.expanduser("~"), "Desktop", "ad.csv")

# Lee el archivo CSV especificando el delimitador correcto
df_adv = pd.read_csv(file_path, delimiter=',', skipinitialspace=True, skiprows=1, names=["TV", "Radio", "Newspaper", "Sales"])


# Muestra las primeras filas del DataFrame para verificar
print(df_adv.head())
Index(['TV', 'Radio', 'Newspaper', 'Sales'], dtype='object')
      TV  Radio  Newspaper  Sales
0  230.1   37.8       69.2   22.1
1   44.5   39.3       45.1   10.4
2   17.2   45.9       69.3    9.3
3  151.5   41.3       58.5   18.5
4  180.8   10.8       58.4   12.9

# Obtén un subconjunto de los datos, es decir, las filas 5 a 13
x_true = df_adv['TV'].iloc[5:13]

# Usa la columna 'Sales' como la variable de respuesta
y_true = df_adv['Sales'].iloc[5:13]

print(x_true)
print(y_true)
5       8.7
6      57.5
7     120.2
8       8.6
9     199.8
10     66.1
11    214.7
12     23.8
Name: TV, dtype: float64
5      7.2
6     11.8
7     13.2
8      4.8
9     10.6
10     8.6
11    17.4
12     9.2
Name: Sales, dtype: float64


# Ordena los datos para obtener índices ordenados de menor a mayor valor de TV
idx = np.argsort(x_true).values

# Obtén los datos del predictor en el orden dado por idx
x_true = x_true.iloc[idx].values

# Obtén los datos de la respuesta en el orden dado por idx
y_true = y_true.iloc[idx].values

### edTest(test_findnearest) ###
# Define una función que encuentra el índice del vecino más cercano 
# y devuelve el valor del vecino más cercano.  
# Nota que esto es solo para k = 1 donde la función de distancia es 
# simplemente el valor absoluto.

def find_nearest(array, value):
    # Para encontrar idx, usa la función .idxmin() en la serie
    idx = pd.Series(np.abs(array - value)).idxmin()
    # Devuelve el índice del vecino más cercano y el valor
    return idx, array[idx]

# Crea algunos valores sintéticos de x (puede que no estén en el conjunto de datos real)
x = np.linspace(np.min(x_true), np.max(x_true))

# Inicializa los valores de y para la longitud de los valores sintéticos de x a cero
y = np.zeros((len(x)))

# Aplica el algoritmo KNN para predecir el valor de y para el valor de x dado
for i, xi in enumerate(x):
    # Obtén los valores de Sales más cercanos al valor de x dado
    y[i] = y_true[find_nearest(x_true, xi)[0]]

# Grafica los datos sintéticos junto con las predicciones    
plt.plot(x, y, '-.')

# Grafica los datos originales usando x negras.
plt.plot(x_true, y_true, 'kx')

# Establece el título y las etiquetas de los ejes
plt.title('TV vs Sales')
plt.xlabel('TV budget in $1000')
plt.ylabel('Sales in $1000')

# Muestra la gráfica
plt.show()
Index(['TV', 'Radio', 'Newspaper', 'Sales'], dtype='object')
      TV  Radio  Newspaper  Sales
0  230.1   37.8       69.2   22.1
1   44.5   39.3       45.1   10.4
2   17.2   45.9       69.3    9.3
3  151.5   41.3       58.5   18.5
4  180.8   10.8       58.4   12.9

